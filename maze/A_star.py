#coding=utf-8

import math

# maps
tm = [
	'############################################################',
	'#..........................................................#',
	'#.............................#............................#',
	'#.............................#............................#',
	'#.............................#............................#',
	'#.............................#............................#',
	'#.............................#............................#',
	'#.............................#............................#',
	'#.............................#............................#',
	'#.............................#............................#',
	'#######.#######################################............#',
	'#....#...E....#............................................#',
	'#....#........#............................................#',
	'#....##########............................................#',
	'#..........................................................#',
	'#..........................................................#',
	'#..........................................................#',
	'#..........................................................#',
	'#.........................................................S#',
	'############################################################']

test_map = []

class Node_Elem:
	def __init__(self, parent, x, y, dist):
		self.parent = parent
		self.x = x
		self.y = y
		self.dist = dist
	
class A_Star:
	def __init__(self, s_x, s_y, e_x, e_y, w, h):
		self.s_x = s_x
		self.s_y = s_y
		self.e_x = e_x
		self.e_y = e_y

		self.width = w
		self.height = h

		self.open = []
		self.close = []
		self.path = []

		def find_path(self):
			p = Node_Elem(None, self.s_x, self.s_y, 0.0)
			while True:
				self.extend_round(p)
				if not self.open:
					return
				idx, p = self.get_best()
			
				if self.is_target(p):
					self.make_path(p)
					return
				self.close.append(p)
				del self.open[idx]

		def make_path(self, p):


